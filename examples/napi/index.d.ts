/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export function asyncPlus100(p: Promise<number>): Promise<number>
/** This is an interface for package.json */
export interface PackageJson {
  name: string
  /** The version of the package */
  version: string
  dependencies?: Record<string, any>
  devDependencies?: Record<string, any>
}
export function readPackageJson(): PackageJson
export function getPackageJsonName(packageJson: PackageJson): string
export function testSerdeRoundtrip(data: any): any
export function contains(source: string, target: string): boolean
export function concatStr(s: string): string
export function concatUtf16(s: string): string
export function concatLatin1(s: string): string
export function roundtripStr(s: string): string
export function setSymbolInObj(symbol: symbol): object
export function createSymbol(): symbol
export function withoutAbortController(a: number, b: number): Promise<number>
export function withAbortController(a: number, b: number, signal: AbortSignal): Promise<number>
export function callThreadsafeFunction(callback: (...args: any[]) => any): void
export function threadsafeFunctionThrowError(cb: (...args: any[]) => any): void
export function threadsafeFunctionFatalMode(cb: (...args: any[]) => any): void
export function threadsafeFunctionFatalModeError(cb: (...args: any[]) => any): void
export function getBuffer(): Buffer
export function appendBuffer(buf: Buffer): Buffer
export function getEmptyBuffer(): Buffer
export function convertU32Array(input: Uint32Array): Array<number>
export function createExternalTypedArray(): Uint32Array
export function mutateTypedArray(input: Float32Array): void
export function derefUint8Array(a: Uint8Array, b: Uint8ClampedArray): number
export function bufferPassThrough(buf: Buffer): Promise<Buffer>
export function asyncReduceBuffer(buf: Buffer): Promise<number>
/**
 * `constructor` option for `struct` requires all fields to be public,
 * otherwise tag impl fn as constructor
 * #[napi(constructor)]
 */
export class Animal {
  /** Kind of animal */
  readonly kind: Kind
  /** This is the constructor */
  constructor(kind: Kind, name: string)
  /** This is a factory method */
  static withKind(kind: Kind): Animal
  get name(): string
  set name(name: string)
  /**
   * This is a
   * multi-line comment
   * with an emoji üöÄ
   */
  whoami(): string
  /** This is static... */
  static getDogKind(): Kind
  /**
   * Here are some characters and character sequences
   * that should be escaped correctly:
   * \[]{}/\:""
   */
  returnOtherClass(): Dog
  returnOtherClassWithCustomConstructor(): Bird
}
export class Dog {
  name: string
  constructor(name: string)
}
export class Bird {
  name: string
  constructor(name: string)
  getCount(): number
}
export type Blake2bHasher = Blake2BHasher
/** Smoking test for type generation */
export class Blake2BHasher {
  update(data: Buffer): void
}
export type Blake2bKey = Blake2BKey
export class Blake2BKey { }
export class Context {
  maybeNeed?: boolean
  constructor()
  static withData(data: string): Context
  method(): string
}
export class AnimalWithDefaultConstructor {
  name: string
  kind: number
  constructor(name: string, kind: number)
}
export class NinjaTurtle {
  name: string
  /** Create your ninja turtle! üê¢ */
  static newRaph(): NinjaTurtle
  getMaskColor(): string
  getName(): string
}
export type JsAssets = Assets
export class Assets {
  constructor()
  get(id: number): JsAsset | null
}
export type JsAsset = Asset
export class Asset {
  constructor()
  get filePath(): number
}
export class Optional {
  static optionEnd(required: string, optional?: string | undefined | null): string
  static optionStart(optional: string | undefined | null, required: string): string
  static optionStartEnd(optional1: string | undefined | null, required: string, optional2?: string | undefined | null): string
  static optionOnly(optional?: string | undefined | null): string
}
export class ClassWithFactory {
  name: string
  static withName(name: string): ClassWithFactory
  setName(name: string): this
}
export class JsClassForEither {
  constructor()
}
export class Fib {
  [Symbol.iterator](): Iterator<number, void, number>
  constructor()
}
export class JsRepo {
  constructor(dir: string)
  remote(): JsRemote
}
export class JsRemote {
  name(): string
}
export type CSSRuleList = CssRuleList
export class CssRuleList {
  getRules(): Array<string>
}
export type CSSStyleSheet = CssStyleSheet
export class CssStyleSheet {
  constructor(rules: Array<string>)
  get rules(): CssRuleList
  anotherCssStyleSheet(): AnotherCssStyleSheet
}
export type AnotherCSSStyleSheet = AnotherCssStyleSheet
export class AnotherCssStyleSheet {
  get rules(): CssRuleList
}
export namespace xxh3 {
  export const ALIGNMENT: number
  export function xxh3_64(input: Buffer): bigint
  /** xxh128 function */
  export function xxh128(input: Buffer): bigint
  /** Xxh3 class */
  export class Xxh3 {
    constructor()
    /** update */
    update(input: Buffer): void
    digest(): bigint
  }
}
export namespace xxh2 {
  export function xxh2Plus(a: number, b: number): number
  export function xxh3Xxh64Alias(input: Buffer): bigint
}
